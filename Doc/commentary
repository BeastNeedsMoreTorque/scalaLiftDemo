Much talk about dependency injection, seems sensible as you can automate testing more easily by reducing coupling of classes (APIs should not lie)

Micro-services: Boner talks of a API gateway in way similar to SOA's ESB and eschews point-to-point communication
and greatly favours asynchronicity (time and space independence). The point-to-point communication at RBC
was not the greatest problem, cost of deployment to Solace and IBM's data grid HA solution was the issue
although ultimately it worked but underdelivered by making it possible only for a handful of components.
The reality is that there were not that many components to integrate sos point-to-point was not so bad or
the integration failed in that scope was reduced too much due to labour costs.

Micro-services is more about integration and putting the services together than the smallness of the services.

Failures should be captured and processed as normal application events and all events (source or state-impacting ones)
should be captured and available for monitoring.

@see http://downloads.lightbend.com/website/reactive-microservices-architecture/Reactive_Microservices_Architecture.pdf?_ga=1.201527193.980121468.1458526407
When designing individual Reactive Microservices, it is important
to adhere to the core traits of Isolation, Single Responsibility,
Autonomy, Exclusive State, Asynchronous Message-Passing and
Mobility. What’s more, Microservices are collaborative in nature and
only make sense as systems. It is in between the Microservices that
the most interesting, rewarding, and challenging things take place,
and learning from past failures30 and successes31 in distributed sys‐
tems and collaborative services-based architectures is paramount.
What we need is comprehensive Microservices platforms that pro‐
vide the heavy lifting for distributed systems, and offer essential
services and patterns built on a solid foundation of the Reactive
principles.
